name: Issue Management

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  issue_comment:
    types: [created, edited]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
    - uses: actions/checkout@v4
    
    - name: Auto-label issues
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body.toLowerCase();
          const labels = [];
          
          // Bug detection
          if (title.includes('bug') || title.includes('error') || title.includes('crash') || 
              title.includes('broken') || title.includes('fails') || title.includes('issue') ||
              body.includes('error') || body.includes('exception') || body.includes('traceback')) {
            labels.push('bug');
          }
          
          // Feature request detection
          if (title.includes('feature') || title.includes('enhancement') || title.includes('add') ||
              title.includes('implement') || title.includes('support') || title.includes('new')) {
            labels.push('enhancement');
          }
          
          // Documentation detection
          if (title.includes('doc') || title.includes('documentation') || title.includes('readme') ||
              title.includes('guide') || title.includes('tutorial') || title.includes('example')) {
            labels.push('documentation');
          }
          
          // Performance detection
          if (title.includes('performance') || title.includes('slow') || title.includes('optimize') ||
              title.includes('speed') || title.includes('memory') || title.includes('cpu')) {
            labels.push('performance');
          }
          
          // Security detection
          if (title.includes('security') || title.includes('vulnerability') || title.includes('exploit') ||
              title.includes('attack') || title.includes('safe') || title.includes('secure')) {
            labels.push('security');
          }
          
          // Good first issue detection
          if (title.includes('good first issue') || title.includes('beginner') || title.includes('easy') ||
              title.includes('starter') || title.includes('newcomer') || title.includes('first time')) {
            labels.push('good first issue');
          }
          
          // Priority detection
          if (title.includes('urgent') || title.includes('critical') || title.includes('high priority') ||
              title.includes('asap') || title.includes('emergency')) {
            labels.push('priority: high');
          } else if (title.includes('low priority') || title.includes('nice to have') ||
                     title.includes('future') || title.includes('someday')) {
            labels.push('priority: low');
          } else {
            labels.push('priority: medium');
          }
          
          // Add default labels
          labels.push('needs-triage');
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: labels
            });
          }

  welcome-newcomers:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
    - name: Welcome newcomers
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const labels = issue.labels.map(label => label.name);
          
          // Check if it's a good first issue
          if (labels.includes('good first issue')) {
            const comment = `## Welcome! üëã
            
            Thank you for your interest in contributing to Terminal Coding Agent! This issue has been labeled as a good first issue, making it perfect for newcomers.
            
            ### Getting Started
            1. **Read the documentation**: Check out our [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines
            2. **Set up your environment**: Follow the development setup instructions
            3. **Ask questions**: Don't hesitate to ask questions in the comments
            4. **Take your time**: There's no rush - take the time you need to understand the codebase
            
            ### Resources
            - [Contributing Guide](CONTRIBUTING.md)
            - [Code of Conduct](CODE_OF_CONDUCT.md)
            - [Security Policy](SECURITY.md)
            - [Project Roadmap](ROADMAP.md)
            
            ### Need Help?
            - Join our community discussions
            - Check existing issues and pull requests
            - Review the codebase to understand the architecture
            
            We're here to help you succeed! üöÄ`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: comment
            });
          }

  issue-template-reminder:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
    - name: Check issue template usage
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const body = issue.body || '';
          
          // Check if issue follows template
          const hasTemplate = body.includes('## Bug Description') || 
                             body.includes('## Feature Description') || 
                             body.includes('## Issue Description');
          
          if (!hasTemplate && body.length < 100) {
            const comment = `## Issue Template Reminder üìù
            
            It looks like this issue might not be following our issue templates. For better organization and faster resolution, please consider using our issue templates:
            
            - [Bug Report Template](.github/ISSUE_TEMPLATE/bug_report.md)
            - [Feature Request Template](.github/ISSUE_TEMPLATE/feature_request.md)
            - [Good First Issue Template](.github/ISSUE_TEMPLATE/good_first_issue.md)
            
            ### What to include:
            - Clear description of the issue or feature
            - Steps to reproduce (for bugs)
            - Expected vs actual behavior
            - Environment details
            - Additional context
            
            This helps maintainers understand and prioritize your issue more effectively! üéØ`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: comment
            });
          }

  stale-issue-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
    - name: Check for duplicate issues
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body.toLowerCase();
          
          // Search for similar issues
          const { data: issues } = await github.rest.search.issuesAndPullRequests({
            q: `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open ${title.split(' ').slice(0, 3).join(' ')}`,
            sort: 'created',
            order: 'desc'
          });
          
          if (issues.items.length > 1) {
            const similarIssues = issues.items
              .filter(item => item.number !== issue.number)
              .slice(0, 3)
              .map(item => `- #${item.number}: ${item.title}`)
              .join('\n');
            
            const comment = `## Potential Duplicate Issue üîç
            
            This issue might be similar to existing ones:
            
            ${similarIssues}
            
            Please review these issues to see if your concern is already being tracked. If so, please close this issue and add your information to the existing one.
            
            If this is a different issue, please add a comment explaining how it differs from the existing ones.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: comment
            });
          }

  triage-reminder:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
    - name: Add triage reminder
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const labels = issue.labels.map(label => label.name);
          
          if (labels.includes('needs-triage')) {
            // Schedule a reminder for maintainers
            setTimeout(async () => {
              const { data: updatedIssue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number
              });
              
              if (updatedIssue.state === 'open' && updatedIssue.labels.some(label => label.name === 'needs-triage')) {
                const comment = `## Triage Reminder ‚è∞
                
                This issue has been open for a while and still needs triage. Please review and:
                
                - [ ] Add appropriate labels
                - [ ] Assign to a maintainer
                - [ ] Set milestone if applicable
                - [ ] Add priority level
                - [ ] Close if duplicate or invalid
                
                **Issue opened**: ${new Date(issue.created_at).toLocaleDateString()}
                **Days open**: ${Math.floor((new Date() - new Date(issue.created_at)) / (1000 * 60 * 60 * 24))}`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: comment
                });
              }
            }, 7 * 24 * 60 * 60 * 1000); // 7 days
          }
