name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
        - prerelease

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, generating full changelog"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          echo "Generating changelog from $PREVIOUS_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --reverse)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## What's New in ${{ github.ref_name }}
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          ```bash
          pip install terminal-coding-agent==${{ github.ref_name }}
          ```
          
          ### Documentation
          - [Installation Guide](README.md#installation-and-setup)
          - [Usage Examples](EXAMPLES.md)
          - [Contributing Guide](CONTRIBUTING.md)
          
          ### Support
          - [Report Issues](https://github.com/${{ github.repository }}/issues)
          - [Security Policy](SECURITY.md)
          - [Code of Conduct](CODE_OF_CONDUCT.md)
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        files: |
          dist/*
    

  publish-pypi:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -n "$TWINE_PASSWORD" ]; then
          twine upload dist/*
        else
          echo "Skipping PyPI upload - PYPI_API_TOKEN not configured"
        fi

  docker-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: terminal-coding-agent
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          type=raw,value=${{ github.ref_name }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-community:
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi, docker-release]
    if: always()
    steps:
    - name: Notify Community
      uses: actions/github-script@v7
      with:
        script: |
          const release = context.payload.release || { tag_name: '${{ github.ref_name }}' };
          const success = '${{ needs.publish-pypi.result }}' === 'success';
          
          let message = `## Release ${{ github.ref_name }} ${success ? 'Successfully Published' : 'Failed'}
          
          **Release**: ${{ github.ref_name }}
          **Status**: ${success ? 'Published' : 'Failed'}
          **Date**: ${new Date().toLocaleDateString()}
          
          ### What's Available
          - **PyPI Package**: ${success ? 'Published' : 'Failed'}
          - **Docker Image**: ${{ needs.docker-release.result == 'success' && 'Published' || 'Failed' }}
          - **GitHub Release**: Published
          
          ### Installation
          \`\`\`bash
          pip install terminal-coding-agent==${{ github.ref_name }}
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull terminal-coding-agent:${{ github.ref_name }}
          \`\`\`
          
          ### Links
          - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
          - [PyPI Package](https://pypi.org/project/terminal-coding-agent/)
          - [Docker Hub](https://hub.docker.com/r/terminal-coding-agent)
          
          Thank you to all contributors!`;
          
          // Create a discussion post
          await github.rest.discussions.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Release ${{ github.ref_name }} - ${success ? 'Successfully Published' : 'Failed'}`,
            body: message,
            category: 'announcements'
          });

  update-documentation:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version in documentation
      run: |
        # Update version in README.md
        sed -i "s/version.*=.*\".*\"/version = \"${{ github.ref_name }}\"/g" README.md
        
        # Update version in setup.py if it exists
        if [ -f setup.py ]; then
          sed -i "s/version.*=.*\".*\"/version = \"${{ github.ref_name }}\"/g" setup.py
        fi
        
        # Update version in pyproject.toml if it exists
        if [ -f pyproject.toml ]; then
          sed -i "s/version.*=.*\".*\"/version = \"${{ github.ref_name }}\"/g" pyproject.toml
        fi
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md setup.py pyproject.toml
        git commit -m "docs: update version to ${{ github.ref_name }}" || exit 0
        git push
